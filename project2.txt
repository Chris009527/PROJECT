#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <vector>
#include <queue>
#include<stack>
using namespace std;
struct Cood{
    int x,y;
    Cood(){}
    Cood(int a,int b){
        x = a;
        y = b;
    }
    Cood(const Cood& p){
        x = p.x;
        y = p.y;
    }
    bool operator == (const Cood& p){
       return(x == p.x && y == p.y);
    }
    Cood operator +(const Cood& p){
        return Cood(x+p.x,y+p.y);
    }
    Cood operator -(const Cood& p){
       return Cood(x-p.x,y-p.y);
    }
    bool operator != (const Cood& p){
       return(x != p.x || y != p.y);
    }
};
//////////////////////////////////////COOD
int **A;
int **w;
int **dis;
Cood**predecessor;
int n, m ,B;
bool found;
const Cood Up(-1,0),Down(1,0),Left(0,-1),Right(0,1);
int all_clear;
queue<Cood>ans;
int step = 0;
int main(int argc, char* argv[]){
    int n, m,B;
    ifstream fin;
    ofstream fout;
    string id = "106000212";
    string Inname("floor.data");
    string Outname("final.path");
    fin.open(Inname);
    fout.open(Outname);
    if(fin&&fout){
        cout<<"successful open "<<id+"/floor.data"<<endl;
        cout<<"successful open "<<id+"/final.path"<<endl;
    }else{
        if(!fin&&fout) cout<<"fail input "<<id+"/floor.data"<<endl;
        else if(fin&&!fout) cout<<"fail output "<<id+"/final.path"<<endl;
        else cout<<"fail both "<<id+"/floor.data"<<" and "<<id+"/final.path"<<endl;

        return -1;
    }
    fin>>n>>m;
    fin>>B;
    int **A = new int*[n];
    for(int i=1;i<=n;i++){
        A[i] = new int[m];
    }


    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            fin >> A[i][j];
        }
    }
    Cood searchR(int **mat);
    //int size0(int **mat);

    queue<Cood> ans;
    Cood cood;
    Cood start_p,recharge_p,now_p;
    //int all_point;
    int l;
    Cood *num = new Cood[n*m];
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(A[i][j] == 0){
                num[++l].x=i;
                num[l].y = j;
                num[l].count = 0;
                cout<<num[l].x<<" "<<num[l].y<<endl;
            }
        }
     }


    cood.count=0;
    start_p = searchR(A);///start at r
    recharge_p =now_p= start_p;/// recharge at r
    now_p.count = 0;
    //all_point = size0(A);
    while(num[l].count!=0){
        if(A[now_p.x-1][now_p.y]!=1){///up
            now_p.x -= 1;
            now_p.count += 1;
            ans.push(now_p);
        }else if(A[now_p.x][now_p.y-1]!=1){///left
            now_p.y -= 1;
            now_p.count += 1;
            ans.push(now_p);
        }else if(A[now_p.x][now_p.y+1]!=1){///right
            now_p.y += 1;
            now_p.count += 1;
            ans.push(now_p);
        }else{///down
            now_p.x += 1;
            now_p.count += 1;
            ans.push(now_p);
        }



    }




    for(int i=1;i<=n;i++){///delete matrix
        delete[] A[i];
    }
    delete[]A;
    return 0;
}//
//////////////////////////////
Cood searchR(int **mat){
    Cood R;
    int n,m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(mat[i][j] == 82){
                R.x = i;
                R.y = j;
                return R;
            }
        }
     }
queue<Cood> road;

int bfs(int sx, int sy, int ex, int ey,int **A){///找出兩點最短距離
    memset(book,0,sizeof(book));
    while(!road.empty())
        road.pop();
    Cood now,next;
    now.x=sx, now.y=sy, now.count=0;
    road.push(now);
    book[sx][sy]=1;
    while(!road.empty()){
        now=road.front();
        road.pop();
        for(int i=0;i<4;i++){
            next.x=now.x+d[i][0];
            next.y=now.y+d[i][1];
            next.count=now.count+1;
            if(A[next.x][next.y]==1) continue;
            if(next.x==ex && next.y==ey){
                cout<<next.count<<endl;
                return next.count;
            }
            else{
                book[next.x][next.y]=1;
                road.push(next);
            }
        }
    }
    return -1;
}
queue<Cood> droad;
void dfs(int x, int len,int**way){
    for(int i=0;i<=l;i++){
        if(vis[i]==0 && way[x][i] ){
            vis[i]=1;
            dfs(i,len+way[x][i],way);
            vis[i]=0;
        }
    }
}}
